name: Deploy to Railway

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Create Firebase credentials file
      env:
        FIREBASE_CREDENTIALS_BASE64: ${{ secrets.FIREBASE_CREDENTIALS_BASE64 }}
      run: |
        mkdir -p secrets
        echo "$FIREBASE_CREDENTIALS_BASE64" | base64 --decode > secrets/dulceria-secret.json
        echo "✅ Firebase credentials file created"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test FastAPI import
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      run: |
        python -c "from main import app; print('✅ FastAPI app imported successfully')"
    
    - name: Validate MongoDB connection
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      run: |
        python -c "from utils.mongodb import test_connection; result = test_connection(); print(f'MongoDB: {result}'); assert result"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Firebase credentials file
      env:
        FIREBASE_CREDENTIALS_BASE64: ${{ secrets.FIREBASE_CREDENTIALS_BASE64 }}
      run: |
        mkdir -p secrets
        echo "$FIREBASE_CREDENTIALS_BASE64" | base64 --decode > secrets/dulceria-secret.json
        echo "✅ Firebase credentials file created for deployment"
    
    - name: Install Railway CLI
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        echo "$HOME/.railway/bin" >> $GITHUB_PATH
    
    - name: List Railway services
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        echo "Available Railway projects:"
        railway project list || true
        echo "Current context:"
        railway status || true
    
    - name: Deploy to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        # Clean start - remove any existing railway local config (but keep railway.json)
        rm -rf .railway 2>/dev/null || true
        
        # Debug: Check if token exists
        echo "Token exists: $([ -n "$RAILWAY_TOKEN" ] && echo "YES" || echo "NO")"
        echo "Token length: ${#RAILWAY_TOKEN}"
        
        # Export token explicitly
        export RAILWAY_TOKEN="${{ secrets.RAILWAY_TOKEN }}"
        
        # Check if token is working
        echo "Checking Railway authentication..."
        railway whoami || echo "Authentication failed - token may be invalid"
        
        # Try to list projects to verify auth
        echo "Listing Railway projects..."
        railway list || echo "Cannot list projects - not authenticated"
        
        # Initialize new Railway project (no arguments)
        echo "Initializing Railway project..."
        railway init || echo "Init failed - trying direct deployment"
        
        # Check status
        echo "Railway status:"
        railway status || echo "Status not available"
        
        # Deploy using up command
        echo "Starting deployment..."
        railway up || echo "Deployment failed"
    
    - name: Get deployment URL
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        # Wait a moment for deployment to initialize
        sleep 15
        
        # Check deployment status
        echo "Deployment status:"
        railway status
        
        # Get the deployment URL
        echo "Getting deployment URL..."
        URL=$(railway domain 2>/dev/null || echo "Domain not ready yet")
        
        if [ "$URL" != "Domain not ready yet" ]; then
          echo "🚀 Deployment URL: $URL"
          echo "📖 Swagger UI: $URL/docs"
        else
          echo "⏳ Deployment in progress. Check Railway dashboard for URL."
        fi
