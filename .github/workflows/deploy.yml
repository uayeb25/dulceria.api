name: Deploy to Railway

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Create Firebase credentials file
      env:
        FIREBASE_CREDENTIALS_BASE64: ${{ secrets.FIREBASE_CREDENTIALS_BASE64 }}
      run: |
        mkdir -p secrets
        echo "$FIREBASE_CREDENTIALS_BASE64" | base64 --decode > secrets/dulceria-secret.json
        echo "✅ Firebase credentials file created"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test FastAPI import
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      run: |
        python -c "from main import app; print('✅ FastAPI app imported successfully')"
    
    - name: Validate MongoDB connection
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      run: |
        python -c "from utils.mongodb import test_connection; result = test_connection(); print(f'MongoDB: {result}'); assert result"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Firebase credentials file
      env:
        FIREBASE_CREDENTIALS_BASE64: ${{ secrets.FIREBASE_CREDENTIALS_BASE64 }}
      run: |
        mkdir -p secrets
        echo "$FIREBASE_CREDENTIALS_BASE64" | base64 --decode > secrets/dulceria-secret.json
        echo "✅ Firebase credentials file created for deployment"
    
    - name: Install Railway CLI
      run: |
        # Use the official Railway CLI installation method with retry
        curl -fsSL https://railway.app/install.sh | sh || {
          echo "First install attempt failed, trying alternative method..."
          # Alternative: Download from GitHub releases (latest)
          curl -L https://github.com/railwayapp/cli/releases/latest/download/railway-linux-x86_64.tar.gz -o railway.tar.gz
          tar -xzf railway.tar.gz
          sudo mv railway /usr/local/bin/
          chmod +x /usr/local/bin/railway
        }
        
        # Add to PATH if using first method
        if [ -d "$HOME/.railway/bin" ]; then
          echo "$HOME/.railway/bin" >> $GITHUB_PATH
          export PATH="$HOME/.railway/bin:$PATH"
        fi
        
        # Verify installation
        railway --version || railway version || echo "Railway CLI installed but version check failed"
    
    - name: List Railway services
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        echo "Available Railway projects:"
        railway project list || true
        echo "Current context:"
        railway status || true
    
    - name: Deploy to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        echo "Railway status:"
        railway status
        echo "Listing existing services..."
        railway service list || echo "Cannot list services"
        echo "Attempting deployment with different service names..."
        railway up --service web || \
        railway up --service api || \
        railway up --service app || \
        railway up --service dulceria-api || \
        railway up --service dulceria || \
        railway up --service backend || \
        (echo "Creating new service and deploying..." && railway up)

    - name: Get deployment URL
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        # Wait a moment for deployment to initialize
        sleep 15
        
        # Check deployment status
        echo "Deployment status:"
        railway status
        
        # Get the deployment URL
        echo "Getting deployment URL..."
        URL=$(railway domain 2>/dev/null || echo "Domain not ready yet")
        
        if [ "$URL" != "Domain not ready yet" ]; then
          echo "🚀 Deployment URL: $URL"
          echo "📖 Swagger UI: $URL/docs"
        else
          echo "⏳ Deployment in progress. Check Railway dashboard for URL."
        fi
